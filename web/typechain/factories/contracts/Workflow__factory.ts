/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers';
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from 'ethers';
import type { NonPayableOverrides } from '../../common';
import type { Workflow, WorkflowInterface } from '../../contracts/Workflow';

export const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_nftContract',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'OwnableInvalidOwner',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'OwnableUnauthorizedAccount',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ReentrancyGuardReentrantCall',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'getNftContract',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'nftContract',
    outputs: [
      {
        internalType: 'contract INFT',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'string',
        name: 'tokenUri',
        type: 'string',
      },
    ],
    name: 'triggerMint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b50604051610b3d380380610b3d8339818101604052810190610032919061022d565b336001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100ad5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100a49190610269565b60405180910390fd5b6100bc8161010460201b60201c565b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610284565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101fa826101cf565b9050919050565b61020a816101ef565b811461021557600080fd5b50565b60008151905061022781610201565b92915050565b600060208284031215610243576102426101ca565b5b600061025184828501610218565b91505092915050565b610263816101ef565b82525050565b600060208201905061027e600083018461025a565b92915050565b6108aa806102936000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063270a3cbd14610067578063667c99de14610083578063715018a6146100a15780638da5cb5b146100ab578063d56d229d146100c9578063f2fde38b146100e7575b600080fd5b610081600480360381019061007c919061062c565b610103565b005b61008b61020b565b6040516100989190610697565b60405180910390f35b6100a9610235565b005b6100b3610249565b6040516100c09190610697565b60405180910390f35b6100d1610273565b6040516100de9190610711565b60405180910390f35b61010160048036038101906100fc919061072c565b610299565b005b3373ffffffffffffffffffffffffffffffffffffffff16610122610249565b73ffffffffffffffffffffffffffffffffffffffff1614610178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016f906107b6565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def52183836040518363ffffffff1660e01b81526004016101d5929190610844565b600060405180830381600087803b1580156101ef57600080fd5b505af1158015610203573d6000803e3d6000fd5b505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61023d61031f565b61024760006103a6565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102a161031f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103135760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161030a9190610697565b60405180910390fd5b61031c816103a6565b50565b61032761046c565b73ffffffffffffffffffffffffffffffffffffffff16610345610249565b73ffffffffffffffffffffffffffffffffffffffff16146103a45761036861046c565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161039b9190610697565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104b382610488565b9050919050565b6104c3816104a8565b81146104ce57600080fd5b50565b6000813590506104e0816104ba565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610539826104f0565b810181811067ffffffffffffffff8211171561055857610557610501565b5b80604052505050565b600061056b610474565b90506105778282610530565b919050565b600067ffffffffffffffff82111561059757610596610501565b5b6105a0826104f0565b9050602081019050919050565b82818337600083830152505050565b60006105cf6105ca8461057c565b610561565b9050828152602081018484840111156105eb576105ea6104eb565b5b6105f68482856105ad565b509392505050565b600082601f830112610613576106126104e6565b5b81356106238482602086016105bc565b91505092915050565b600080604083850312156106435761064261047e565b5b6000610651858286016104d1565b925050602083013567ffffffffffffffff81111561067257610671610483565b5b61067e858286016105fe565b9150509250929050565b610691816104a8565b82525050565b60006020820190506106ac6000830184610688565b92915050565b6000819050919050565b60006106d76106d26106cd84610488565b6106b2565b610488565b9050919050565b60006106e9826106bc565b9050919050565b60006106fb826106de565b9050919050565b61070b816106f0565b82525050565b60006020820190506107266000830184610702565b92915050565b6000602082840312156107425761074161047e565b5b6000610750848285016104d1565b91505092915050565b600082825260208201905092915050565b7f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000600082015250565b60006107a0601783610759565b91506107ab8261076a565b602082019050919050565b600060208201905081810360008301526107cf81610793565b9050919050565b600081519050919050565b60005b838110156107ff5780820151818401526020810190506107e4565b60008484015250505050565b6000610816826107d6565b6108208185610759565b93506108308185602086016107e1565b610839816104f0565b840191505092915050565b60006040820190506108596000830185610688565b818103602083015261086b818461080b565b9050939250505056fea264697066735822122059bcd6c33ee6ec27a252fbb8a1541c396348269dddfdd0866022827b08f2350264736f6c634300081b0033';

type WorkflowConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: WorkflowConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Workflow__factory extends ContractFactory {
  constructor(...args: WorkflowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(_nftContract: AddressLike, overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_nftContract, overrides || {});
  }
  override deploy(_nftContract: AddressLike, overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(_nftContract, overrides || {}) as Promise<
      Workflow & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Workflow__factory {
    return super.connect(runner) as Workflow__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WorkflowInterface {
    return new Interface(_abi) as WorkflowInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Workflow {
    return new Contract(address, _abi, runner) as unknown as Workflow;
  }
}
